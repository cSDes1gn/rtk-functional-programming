#!/usr/bin/racket
#lang racket
; Mutation in LISP
; mutation is discouraged in functional programming
; the set! form associates a new value to a predefined name
;(set! name new)      where new is an expr
; notably in substitution model set! is not used since expr will remain the same everywhere in code
; with mutation a definition can change so the evaluation of an expression can be different in different code spots
; functional vs imperative paradigm

; Here is an additive counter on global counter def
(define counter 0)
(define (count-up)
    (set! counter (+ counter 1)) counter)

; This version creates a local variable counter ofr counting up which allows for multiple counters to exist
(define (new-count-up)        ; there are () around new-count-up since we are defining an expression
    (let ([counter 0]) 
        (λ () (set! counter (+ counter 1)) counter))) ; when let returns it returns this expr created by λ which is bound to new-count-up
                                                   ; this saves the counter value within the expression
(define count1 (new-count-up))
(define count2 (new-count-up))
(count1)        ; 1
(count1)        ; 2
(count2)        ; 1
(count1)        ; 3

; no let required since the value is specified by the user and stored in the returned expr
(define (upcounter counter)
    (λ () (set! counter (+ counter 1)) counter))

; begin defines a set of expressions evaluated in sequence but outputs the value of only the final expression

(define (make-counter counter)
    (define (count-up)
        (set! counter (+ counter 1)) counter)
    (define (count-down)
        (if (> counter 0)
            (begin (set! counter (- counter 1)) counter) "Counter is 0") ; need to use begin since we want to return the value of counter or msg
    )
    (define (dispatch cmd)
        (cond
            ([eq? cmd 'inc] count-up)
            ([eq? cmd 'dec] count-down)
        (else (error "Unknown command:" cmd)))
    )
    dispatch
)
; count1 is bound to dispatch
(define count10 (make-counter 0))
(count10 'inc)       ; 1

;; Begin usage:
;; In this procedure, all the expresions are enclosed in a begin special form.
;; The expressions are evaluated in sequence and the value of the final expression
;; is the value of the entire begin form.

(define (proc1 x y)
  (begin (display "Hello, ")
         (display "world!")
         (newline)
         (+ x 1)
         (+ x y)))

(proc1 10 20)

;; There's no need to use (begin) to enclose the sequence of expressions in a procedure body

(define (proc2 x y)
  (display "Hello, ")
  (display "world!")
  (newline)
  (+ x 1)
  (+ x y))

(proc2 10 20)


;; If the body of a let expression has multiple expressions,
;; they must be enclosed in a begin expression.

(define (proc3)
  (let ((x 10)
        (y 20))
    (begin
      (display "Hello, ")
      (display "World!")
      (newline)
      (+ x 1)
      (+ x y))))

(proc3)

;; If the true-clause or false-clause of an if expression has multiple expressions,
;; they must be enclosed in a begin statement.

; Return x if x equals y; otherwise return y

(define (proc4 x y)
  (if (= x y)
      (begin
        (display "x = y")
        (newline)
        x)

      ; "else" part
      (begin
        (display "x != y")
        (newline)
        y)))

(proc4 1 1)
(proc4 1 2)

;; Multiple expressions in a cond expression don't need to be
;; enclosed in a begin statement.

(define (proc5 x y)
  (cond ((= x y)
         (display "x = y")
         (newline)
         x)

        (else (display "x != y")
              (newline)
              y)))

(proc5 1 1)

(define (count-up)
  (let ([counter 0])
        (set! counter (+ counter 1))
        counter))
(define (new-count-up)
  (let ([counter 0])
      (lambda () (set! counter (+ counter 1))
      counter)))
(define x (new-count-up))
(define y (new-count-up))