#lang racket

; Tree Recursuion

(define (fib n) (fib-iter 1 0 n))
    (define (fib-iter a b count) 
        (if (= count 0)
            b
            (fib-iter (+ a b) a (- count 1))))

(define (count-change amount) 
    (cc amount 5)) 
    (define (cc amount kinds-of-coins)
        (cond ((= amount 0) 1)
            ((or (< amount 0) (= kinds-of-coins 0)) 0) 
            (else (+ (cc amount (- kinds-of-coins 1))
                 (cc (- amount (first-denomination kinds-of-coins)) kinds-of-coins)))))
    (define (first-denomination kinds-of-coins)
        (cond ((= kinds-of-coins 1) 1) ((= kinds-of-coins 2) 5)
                ((= kinds-of-coins 3) 10)
                ((= kinds-of-coins 4) 25)
                ((= kinds-of-coins 5) 50)))

(count-change 100)

; build list procedure
(define (build-lister n f)
    ; build-up creates a list by applying procedure f to the integers
    ; from m to n-1, m < n, in order. The first list element is the
    ; value produced by (f m), and the last list element is the value
    ; produced by (f (- n 1)).
    (define (build-up m)
        (if (= m n)
            '()
            (cons (f m) (build-up (+ m 1)))))
    (build-up 0))
(build-lister 11 (lambda (x) (* x x)))

; Recursive multiply all numbers in list
(define (multiply-all nums)
    (if (empty? nums)
        1
        (* (car nums) (multiply-all (cdr nums)))))