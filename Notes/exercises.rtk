#lang racket

; Exercises from Ch 3
(define cube 
    (lambda (x) (* x x x)))

(define compute-cost
    (lambda (price tax)
        (+ price (* price tax))))

(compute-cost 13 0.05)

; clean
(define (xor a b)
    (if a (not b) b))

(define (absvalue x)
    (cond [(< x 0) (- x)]
          [else x]))

(absvalue -40)
(absvalue 2)

(define (magnitude a b)
    (if (< (absvalue a) (absvalue b))
        b
        a))

(magnitude 8 -9)

; Exercises from Ch 4
(define fcompose
    (lambda (f g) 
        (lambda (x) (g (f x)))))

(define inc
    (lambda (x) (+ x 1)))

(define square
    (lambda (x) (* x x)))

((fcompose square square) 3)

; (fcompose (lambda (x) (âˆ— x 2)) (lambda (x) (/ x 2)))

((fcompose (fcompose inc inc) inc) 2)

(define (self-compose f)
    (fcompose f f))

(((fcompose self-compose self-compose) inc) 1)

(define (fcompose3 f g h)
    (lambda (x) (h (g (f x)))))

(define (fcompose3alt f g h)
    (fcompose (fcompose f g) h))

(define f2compose
    (lambda (f g) 
    (lambda (x y) (g (f x y)))))

((f2compose + abs) 3 -5)

; Recursion
(define (gauss-sum n)
    (if (= n 1) 1
        (+ n (gauss-sum (- n 1)))))

(gauss-sum 100)

(define (accumulate f)
    (lambda (x) 
        (if (= x 1)
            1
            (f x ((accumulate f) (- x 1))))))

((accumulate +) 100)
((accumulate *) 3)

(define (bigger a b)
    (if (> a b)
        a
        b))

(define (find-maximum-epsilon f low high epsilon)
    (if (>= low high)
        (f low)
        (bigger (f low) (find-maximum-epsilon f (+ low epsilon) high epsilon))))

(define (find-maximum-input f low high)
    (define (find-maximum-input-worker f low high best)
        (if (= low high)
            (if (> (f low) (f best))
                low
                best)
                (find-maximum-input-worker f (+ low 1) high
                    (if (> (f low) (f best))
                        low
                        best))))
    (find-maximum-input-worker f low high low))

; tail recursion (recursive expression cant contain another application expression)
; this function provides all neccessary updates when it recures which means there are no hanging frames to return to
(define (factorial n)
    (define (helper n v)
        (if (= n 1)
            v
            (helper (- n 1) (* n v))))
    (helper n 1))

(define (find-maximum f low high)
    (define (find-maximum-helper f low high best)
        (if (= low high)
            (if (> (f best) (f high))
                best
                high)
            (if (> (f low) (f best))
                (find-maximum-helper f (+ low 1) high low)
                (find-maximum-helper f (+ low 1) high best))))
    (find-maximum-helper f low high low))

(find-maximum (lambda (x) (* x (- 5.5 x))) 1 10)

; Exercise set 5

(define tpair
    (cons (cons (cons 1 2) (cons 3 4) 5)))

(define sample 
    (cons (1 (cons (cons(2 3) cons(4 cons(5 6)))))))

(list? (cdr (cons 1 (cons 2 (cons null null)))))

(define (is-list? l)
    (if (null? l)
        #t
        (if (pair? l)
            (is-list? (cdr l))
            #f)))

; must iterate through list twice via recursive definitions which is inefficient and memory
; intensive
(define (list-max li)
    (if null? li)
        0
        (if (> (list-max (cdr li)) (car li))
            (list-max (cdr li))
            (car li)))

(define (list-last-element li)
    (if (null? li)
        (error "input list cannot be empty")
        (if null? (cdr li)
            (car li)
            (list-last-element (cdr li)))))

(define (list-ordered? fn li)
    (if (null? li)
        #t
        (if (null? (cdr li))
            #t
            (if (fn (car li) (car (cdr li)))
                (list-ordered? fn (cdr li))
                #f))))

(define (list-increment li)
    (if (null? li)
        null
        (cons (+ (car li) 1) (list-increment (cdr li)))))

(define (list-filter-even li)
    (if (null? li)
        null
        (if (even? (car li))
            (cons (car li) (list-filter-even (cdr li))
            (list-filter-even (cdr li))))))

; Very hard problem
(define (list-contains? elem li)
    (if (null? li)
        #f
        (if (equal? elem (car li))
            #t
            (list-contains? elem (cdr li)))))

(define (list-unique-elements li)
    (if (null? li)
        null
        (if (list-contains? (car li) (cdr li))
            (list-unique-elements (list-filter (lambda (elem) (not (equal? elem (car li))) li)))
            (cons (car li) (list-unique-elements (cdr li))))))
